---
version: 2.1
executors:
  executor_med:  # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
      - image: postgres:11.4-alpine
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: orion
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: orion

  executor_machine:
    machine:
      image: ubuntu-1604:201903-01 #Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      docker_layer_caching: true
    working_directory: ~/project

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libsodium18 libsodium-dev apt-transport-https
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}
            - deps-

jobs:
  build:
    executor: executor_med
    steps:
      - prepare
      - run:
          name: Spotless checks
          command: ./gradlew spotlesscheck

      - run:
          name: Downloading dependencies
          command: ./gradlew dependencies checkLicenses

      - run:
          name: Compiling
          command: ./gradlew assemble

      - store_artifacts:
          name: Uploading artifacts
          path: build/distributions
          destination: distributions
          when: always

      - run:
          name: Running unit tests
          command: ./gradlew --stacktrace test

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres to startup and be ready && exit 1

      - run:
          name: Running acceptance tests
          command: ./gradlew --stacktrace acceptanceTest

      - run:
          name: Collecting test results
          command: |
            ./gradlew jacocoTestReport
            mkdir -p ~/test-results/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/ \;
            find . -type f -regex ".*/build/acceptance-results/.*xml" -exec cp {} ~/test-results/ \;
          when: always

      - store_test_results:
          name: Uploading test results
          path: ~/test-results
          destination: tests
          when: always

      - run:
          name: Collecting reports
          command: |
            mkdir -p ~/reports/license
            (cd ./build/reports/license && tar c .) | (cd ~/reports/license && tar x)
              find . -type d -regex ".*/build/reports/tests/test" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/tests\/test//'`
                  mkdir -p ~/reports/test/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/test/"$module" && tar x)
              done
              find . -type d -regex ".*/build/reports/acceptance" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/acceptance//'`
                  mkdir -p ~/reports/acceptance/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/acceptance/"$module" && tar x)
              done
              find . -type d -regex ".*/build/reports/jacoco/test/html" | while read dir; do
                  module=`echo $dir | sed -e 's/build\/reports\/jacoco\/test\/html//'`
                  mkdir -p ~/reports/jacoco/"$module"
                  (cd "$dir" && tar c .) | (cd ~/reports/jacoco/"$module" && tar x)
              done
          when: always

      - store_artifacts:
          name: Uploading reports
          path: ~/reports
          destination: reports

      - run:
          name: Building JavaDoc
          command: ./gradlew javadoc

      - run:
          name: Collecting JavaDoc
          command: |
            find . -type d -regex ".*/build/docs/javadoc" | while read dir; do
                module=`echo $dir | sed -e 's/build\/docs\/javadoc//'`
                mkdir -p ~/docs/"$module"
                (cd "$dir" && tar c .) | (cd ~/docs/"$module" && tar x)
            done

      - store_artifacts:
          name: Uploading JavaDoc
          path: ~/docs
          destination: javadoc

      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle

      - persist_to_workspace:
          root: ~/project
          paths:
            - ./

  buildDocker:
    executor: executor_machine
    steps:
      - prepare
      - run:
          name: Install Packages - Java 11
          command: |
            sudo add-apt-repository -y ppa:openjdk-r/ppa
            sudo apt update
            sudo apt install -y openjdk-11-jdk
            sudo update-java-alternatives -s java-1.11.0-openjdk-amd64
      - attach_workspace:
          at: ~/project
      - run:
          name: hadoLint
          command: |
            docker run --rm -i hadolint/hadolint < docker/Dockerfile
      - run:
          name: build and test docker image
          command: |
            mkdir -p docker/reports
            ./gradlew --no-daemon testDocker

  upload-distribution:
    executor: executor_med
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: Upload skinny targz file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).tar.gz consensys binaries orion $(cat build/version)"
      - run:
          name: Upload skinny zip file to Bintray
          command: "./scripts/upload-to-bintray.sh $BINTRAY_USER $BINTRAY_KEY build/distributions/orion-$(cat build/version).zip consensys binaries orion $(cat build/version)"
      - deploy:
          name: Deploying snapshot to Bintray (release branches only)
          command: |
            if [ -z "${CIRCLE_PULL_REQUEST}" ] && echo "${CIRCLE_BRANCH}" | grep -q -E '^master$|^[0-9]+\.[0-9]+$'; then
              echo "Start deployment"
              BINTRAY_DEPLOY=true ./gradlew deploy
            else
              echo "Start dry run deployment"
              ./gradlew deploy
            fi

  publishDocker:
    executor: executor_med
    steps:
      - prepare
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish Docker
          command: |
            docker login --username "${DOCKER_USER}" --password "${DOCKER_PASSWORD}"
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" dockerUpload

workflows:
  version: 2
  pipeline:
    jobs:
      - build
      - buildDocker:
          requires:
            - build
      - upload-distribution:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
          requires:
            - build
      - publishDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
          requires:
            - buildDocker
